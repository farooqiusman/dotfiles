import java.io.*;
import java.util.ArrayList;
public class A5 {

	static int pointer = -1;	
	static ArrayList<Symbol> tokens = new ArrayList<>();

	public A5() {
		super();

	}
	public static void main(String[] args) throws Exception {
		BufferedWriter bw = new BufferedWriter(new FileWriter("a5.output"));
		//construct the token array
		A5Scanner scanner = new A5Scanner(new FileInputStream(new File(args[0])));
		// note that yylex() is the default method to get the next token in scanner that is generated by JLlex.
		Symbol token; 
		while ((token=scanner.yylex()).sym != A5Sym.EOF) {
			System.out.println("<"+token.toString()+ ">");  // check that all the symbols are read in correctly.
			tokens.add(token);
		}
		tokens.add(token);   // add EOF as the last token in the array
		boolean legal= program() && nextToken().sym==A5Sym.EOF;
		bw.write((legal) ? "legal\n" : "illegal\n");  //make sure to change if u resubmit
		bw.close();
	}
			
	/** program-->function programPrime
	 * */
	static boolean program() throws Exception{
		int savePointer = pointer;
		if(function() && programPrime()){
			System.out.println("		program--> function programPrime");
			return true;
		}
		pointer = savePointer;
		
		return false;
	}

	/** programPrime --> function programPrime | empty
	 * */
	static boolean programPrime() throws Exception{
		int savePointer = pointer;
		if(function() && programPrime()){
			return true;
		}
		pointer = savePointer;
		return true;
	}

	/** function--> Type MAIN ID LPAREN optionalParams RPAREN block
	 *	function--> Type ID LPAREN optionalParams RPAREN block
	 * */
	static boolean function() throws Exception{
		int savePointer = pointer;

		if(type() && nextToken().sym==A5Sym.MAIN && nextToken().sym==A5Sym.ID && nextToken().sym==A5Sym.LPAREN && optionalParams() && nextToken().sym==A5Sym.RPAREN && block()){
			System.out.println("		function--> Type MAIN ID LPAREN optionalParams RPAREN Block");
			return true;
		}
		pointer = savePointer;

		if(type() && nextToken().sym==A5Sym.ID && nextToken().sym==A5Sym.LPAREN && optionalParams() && nextToken().sym==A5Sym.RPAREN && block()){
			System.out.println("		function--> Type ID LPAREN optionalParams RPAREN Block)");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	/**type-->INT | STRING | REAL
	 * */
	static boolean type() throws Exception{
		int savePointer = pointer;
		int sym = nextToken().sym;
		if (sym == A5Sym.INT || sym == A5Sym.REAL || sym == A5Sym.STRING){
			System.out.println("		type-->INT | STRING | REAL");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	/**optionalParams--> ParamList | empty
	 * */
	static boolean optionalParams() throws Exception{
		int savePointer = pointer;
		if(paramList()){
			System.out.println("		optionalParams-->ParamList | empty");
			return true;
		}
		pointer = savePointer;
		return true;
	}
	/**paramList--> formalParams paramListPrime
	 * */
	static boolean paramList() throws Exception{
		int savePointer = pointer;
		if(formalParams() && paramListPrime()){
			System.out.println("		paramList--> formalParams paramListPrime");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**paramListPrime--> COMMA formalParams paramListPrime 
	 * paramListPrime--> empty
	 * */
	static boolean paramListPrime() throws Exception{
		int savePointer = pointer;
		if(nextToken().sym == A5Sym.COMMA && formalParams() && paramListPrime()){
			System.out.println("		paramListPrime--> COMMA formalParams paramListPrime");
			return true;
		}
		pointer = savePointer;
		System.out.println("		paramListPrime--> empty");
		return true;
	}
	
	/**formalParams-->type ID
	 * */
	static boolean formalParams() throws Exception{
		int savePointer = pointer;
		if(type() && nextToken().sym == A5Sym.ID){
			System.out.println("		formalParams-->type ID");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/** block--> BEGIN statementList END
	 * */
	static boolean block() throws Exception{
		int savePointer = pointer;
		if(nextToken().sym == A5Sym.BEGIN && statementList() && nextToken().sym == A5Sym.END){
			System.out.println("		block--> BEGIN statementList END");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**statementList-->statement statementListPrime
	 * */
	static boolean statementList() throws Exception{
		int savePointer = pointer;
		if(statement() && statementListPrime()){
			System.out.println("		statementList-->statement statementListPrime");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**statementListPrime--> statement statementListPrime | empty
	 * */
	static boolean statementListPrime() throws Exception{
		int savePointer = pointer;
		if(statement() && statementListPrime()){
			System.out.println("		statementListPrime--> statement statementListPrime");
			return true;
		}
		pointer = savePointer;
		System.out.println("		empty");
		return true;
	}

	/**statement--> block | localVar | assignStmt | returnStmt | ifStmt | writeStmt | readStmt
	 * */
	static boolean statement() throws Exception{
		int savePointer = pointer;
		if(block()){
			System.out.println("		statement--> block"); 
			return true;
		}
		pointer = savePointer;

		if(localVar()){
			System.out.println("		statement--> localVar"); 
			return true;
		}
		pointer = savePointer;

		if(assignStmt()){
			System.out.println("		statement--> assignStmt"); 
			return true;
		}
		pointer = savePointer;

		if(returnStmt()){
			System.out.println("		statement--> returnStmt"); 
			return true;
		}
		pointer = savePointer;

		if(ifStmt()){
			System.out.println("		statement--> ifStmt"); 
			return true;
		}
		pointer = savePointer;

		if(writeStmt()){
			System.out.println("		statement--> writeStmt");
			return true;
		}
		pointer = savePointer;

		if(readStmt()){
			System.out.println("		statement--> readStmt");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**localVar-->type ID SEMI 
	 * localVar-->type assignStmt()
	 * */
	static boolean localVar() throws Exception{
		int savePointer = pointer;
		if(type() && nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.SEMI){
			System.out.println("		localVar-->Type ID SEMI");
			return true;
		}
		pointer = savePointer;

		if(type() && assignStmt()){
			System.out.println("		localVar-->Type assignStmt()");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**assignStmt--> ID ASIGN expression SEMI
	 * assignStmt--> ID ASIGN QUOTES SEMI
	 * */
	static boolean assignStmt() throws Exception{
		int savePointer = pointer;
		if(nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.ASIGN && expression() && nextToken().sym == A5Sym.SEMI){
			System.out.println("		assignStmt--> ID ASIGN expression SEMI");
			return true;
		}
		pointer = savePointer;

		if(nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.ASIGN && nextToken().sym == A5Sym.QUOTES && nextToken().sym == A5Sym.SEMI){
			System.out.println("		assignStmt--> ID ASIGN QUOTES SEMI");
			return true;
		}
		pointer = savePointer;
		return false;

	}
	
	/**returnStmt--> RETURN expression SEMI
	 * */
	static boolean returnStmt() throws Exception{
		int savePointer = pointer;
		if(nextToken().sym == A5Sym.RETURN && expression() && nextToken().sym == A5Sym.SEMI){
			System.out.println("	returnStmt--> RETURN expression SEMI");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**ifStmt--> IF LPAREN boolExpression RPAREN statement
	 * ifStmt--> IF LPAREN boolExpression RPAREN statement ELSE statement 
	 * */
	static boolean ifStmt() throws Exception{
		int savePointer = pointer;
		if(nextToken().sym == A5Sym.IF && nextToken().sym == A5Sym.LPAREN && boolExpression() && nextToken().sym == A5Sym.RPAREN && statement() && nextToken().sym == A5Sym.ELSE && statement()){
			System.out.println("		ifStmt--> IF LPAREN boolExpression RPAREN statement ELSE statement");
			return true;
		}
		pointer = savePointer;

		if(nextToken().sym == A5Sym.IF && nextToken().sym == A5Sym.LPAREN && boolExpression() && nextToken().sym == A5Sym.RPAREN && statement()){
			System.out.println("		ifStmt--> IF LPAREN boolExpression RPAREN statement");
			return true;
		}
		pointer = savePointer;
		return false;

	}

	/**writeStmt--> WRITE LPAREN expression COMMA QUOTES RPAREN SEMI
	 * */
	static boolean writeStmt() throws Exception{
		int savePointer = pointer;
		if(nextToken().sym == A5Sym.WRITE && nextToken().sym == A5Sym.LPAREN && expression() && nextToken().sym == A5Sym.COMMA && nextToken().sym == A5Sym.QUOTES && nextToken().sym == A5Sym.RPAREN && nextToken().sym == A5Sym.SEMI){
			System.out.println("		readStmt--> WRITE LPAREN expression COMMA QUOTES RPAREN SEMI");
			return true;
		}
		pointer = savePointer;
		return false;

	}

	/**readStmt--> READ LPAREN ID COMMA QUOTES RPAREN SEMI
	 * */
	static boolean readStmt() throws Exception{
		int savePointer = pointer;
		if(nextToken().sym == A5Sym.READ && nextToken().sym == A5Sym.LPAREN && nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.COMMA && nextToken().sym == A5Sym.QUOTES && nextToken().sym == A5Sym.RPAREN && nextToken().sym == A5Sym.SEMI){
			System.out.println("		readStmt--> READ LPAREN ID COMMA QUOTES RPAREN SEMI");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**expression--> term PLUS expression
	 * expression--> term MINUS expression
	 * expression--> term EQ boolExpression
	 * expression--> term NOTEQUAL boolExpression
	 * expression--> term
	 * */
	static boolean expression() throws Exception {
		int savePointer = pointer;
		if (term() && nextToken().sym == A5Sym.PLUS && expression()) {
			System.out.println("      expression--> term PLUS expression");
			return true;
		}
		pointer = savePointer;

		if (term() && nextToken().sym == A5Sym.MINUS && expression()) {
			System.out.println("      expression--> term MINUS expression");
			return true;
		}
		pointer = savePointer;

		if(term() && nextToken().sym == A5Sym.EQ && expression()){
			System.out.println("		boolExpression--> EQ expression");
			return true;
		}
		pointer = savePointer;

		if(term() && nextToken().sym == A5Sym.NOTEQUAL && expression()){
			System.out.println("		boolExpression--> NOTEQUAL expression");
			return true;
		}
		pointer = savePointer;

		if (term()) {
			System.out.println("      expression--> term");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/**actualParams--> actualParamsPrime | empty
	 * */
	static boolean actualParams() throws Exception{
		int savedPointer = pointer;
		if(actualParamsPrime()){
			System.out.println("		actualParams--> actualParamsPrime"); 
			return true;
		}
		pointer = savedPointer;
		System.out.println("		empty"); 
		return true;

	}

	/**actualParamsPrime--> expression
	 * actualParamsPrime--> expression COMMA actualParamsPrime
	 * 
	 */
	static boolean actualParamsPrime() throws Exception{
		int savedPointer = pointer;
		if(expression() && nextToken().sym == A5Sym.COMMA && actualParamsPrime()){
			System.out.println("		actualParams--> expression COMMA actualParamsPrime"); 
			return true;
		}
		pointer = savedPointer;

		if(expression()){
			System.out.println("		actualParams--> expression"); 
			return true;
		}
		pointer = savedPointer;
		return false;
		

	}

	/** term --> factor TIMES term
	 *	term --> factor DIVIDE term
		term --> factor
	  */
	static boolean term() throws Exception {
		int savePointer = pointer;
		if (factor() && nextToken().sym == A5Sym.TIMES && term()) {
			System.out.println("      term--> factor TIMES term");
			return true;
		}
		pointer = savePointer;

		if (factor() && nextToken().sym == A5Sym.DIVIDE && term()) {
			System.out.println("      term--> factor DIVIDE term");
			return true;
		}
		pointer = savePointer;

		if (factor()) {
			System.out.println("      term--> factor");
			return true;
		}
		pointer = savePointer;
		return false;
	}


	/** functionCall-->ID(actualParams)
	*/
	static boolean functionCall() throws Exception  {
		int savePointer = pointer;
		if (nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.LPAREN && actualParams() && nextToken().sym == A5Sym.RPAREN){
			System.out.println("		functionCall--> ID LPAREN actualParams RPAREN");
			return true;
		}
		pointer = savePointer;
		return false;
	}


	/** factor --> ID | NUMBER | LPAREN expression RPAREN | functionCall | TRUE | FALSE
	*/
	static boolean factor() throws Exception{
		int savePointer = pointer;
		if(functionCall()){
			System.out.println("		factor--> functionCall");
			return true;
		}
		pointer = savePointer;
		int sym=nextToken().sym;
		if (sym == A5Sym.ID || sym == A5Sym.NUMBER || sym == A5Sym.TRUE || sym == A5Sym.FALSE) {
			System.out.println("      factor--> ID | NUMBER | TRUE | FALSE");
			return true;
		}
		pointer = savePointer;

		if (nextToken().sym==A5Sym.LPAREN && expression() && nextToken().sym==A5Sym.RPAREN){ 
			System.out.println("		factor--> LPAREN expression RPAREN");
			return true;
		}
		pointer = savePointer;

		return false;
	}

	/**boolExpression--> expression
	 * */
	static boolean boolExpression() throws Exception{
		int savePointer = pointer;
		if(expression()){
			System.out.println("		boolExpression--> expression");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	static Symbol nextToken() {
		if (pointer < tokens.size()-1) {
			pointer++;
			Symbol token = tokens.get(pointer);
			System.out.println ("next Token: " + token.toString());
			return token;
		} else
			return null;
	}
}

