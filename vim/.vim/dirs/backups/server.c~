#include <stdlib.h>

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>
int main(void){
	int domain = AF_INET;//Network Protocol: TCP/IP
	int type = SOCK_STREAM;//Connection-Oriented
	int protocol = 0;//Default transport: TCP for Internet connection-oriented

	int server_sd = socket(domain, type, protocol);
	if (server_sd == -1){
		printf("error in creating socket for The Server!\n");
		exit(1);
	} else
		printf("socket has created for The Server  with sd:%d\n", server_sd);

	//Binding to an address is a must for The Server!
	struct in_addr server_sin_address;
	server_sin_address.s_addr = inet_addr("137.207.82.51");
	int server_sin_port = htons(1995);

	struct sockaddr_in server_sin;
	server_sin.sin_family = domain;
	server_sin.sin_addr = server_sin_address;
	server_sin.sin_port = server_sin_port;
	int result = bind(server_sd, (struct sockaddr *) &server_sin, sizeof(server_sin));
	if (result == -1){
		printf("error in binding The Server to the address:port = %d:%d\n", server_sin.sin_addr, server_sin.sin_port);
		exit(1);
	} else
		printf("The Server bound to the address:port = %d:%d\n", server_sin.sin_addr, server_sin.sin_port);

	//The Server ready to receive calls (up to 5 calls. More are rejected!) 
	if (listen(server_sd, 5) < 0) {
		perror("The Server's listening failed!\n");
		exit(1);
	}

	struct sockaddr_in client_sin;//I want to know who send the message
	int client_sin_len;
	
	char mailbox[100];
	setbuf(stdout, NULL);
	char reply[25];
	char correct[15] = "comp2560 f2021"; // For simplicity
	int flag = 0;
	while(1){
		result = accept(server_sd, (struct sockaddr *) &client_sin, &client_sin_len);
		if (result == -1){
			//printf("error in opening the request from client %d:%d !\n", client_sin.sin_addr, client_sin.sin_port);
			//exit(1); Do not exit. Go for the next client call
		} else {
			printf("The Server opened the request from client %d:%d\n", client_sin.sin_addr, client_sin.sin_port);
			recv(result, mailbox, 100, 0);
			//printf("The content from the client is: %s\n", mailbox);
			// Check the username and password for correct input
			for (int i = 0; i < 14; i++){
				if (mailbox[i] != correct[i]){
					printf("Authentication Failed!\n");
					strcpy(reply, "Authentication Failed!");
					send(result, reply, 25, 0);
					flag = -1;
					break;
				} else {
					flag = 1;
				}
			}
		}
			
		if(flag > 0){
			// If the authentication is valid, create a child and return x + y to the client
			int child_pid = fork();
			if(child_pid == 0){ //child
				printf("Child created for the process.\n");
				// Get x and y from mailbox (starts at index 15)
				char temp[5];
				int index = 15;
				int j = 0;
				// Find and store the value for x
				while(mailbox[index] != ' '){
					temp[j] = mailbox[index];
					index++;
					j++;
				}
				int x = atoi(temp);
				strcpy(temp, "");
				index++;
				j = 0;

				// Find and store the value for y
				while(mailbox[index] != '\0'){
					temp[j] = mailbox[index];
					index++;
					j++;
				}
				int y = atoi(temp);

				// Store the sum of x + y into a string
				int ans = x + y;
				//itoa(ans, reply, 10);
				sprintf(reply, "%d", ans);

				// Send the answer back to the client
				send(result, reply, 25, 0);
				return 0;
			}
			flag = 0;
		}
	}
}
